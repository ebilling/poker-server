syntax = "proto3";

package auth;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/ebilling/poker-server/pb";

// Cards are represented as a number between 0 and 54
// card == 53 or 54 == JOKER
// (card-1)/13 => 0 == HEART, 1 == SPADE, 2 == DIAMOND, 3 == CLUB
// card%13 =>  1 == ACE, 13 == KING

message Card {
  CardValue value = 1;
  Suit suit = 2;
}

enum Round {
  DEAL = 0;
  FLOP = 1;
  TURN = 2;
  RIVER = 3;
}

enum Suit {
  ANY = 0;
  HEART = 1;
  SPADE = 2;
  DIAMOND = 3;
  CLUB = 4;
  INVALID_SUIT = 99;
}

enum CardValue {
  JOKER = 0;
  ACE = 1;
  TWO = 2;
  THREE = 3;
  FOUR = 4;
  FIVE = 5;
  SIX = 6;
  SEVEN = 7;
  EIGHT = 8;
  NINE = 9;
  TEN = 10;
  JACK = 11;
  QUEEN = 12;
  KING = 13;
  INVALID_CARD = 99;
}

enum Action {
  CHECK = 0;
  CALL = 1;
  RAISE = 2;
  FOLD = 3;
}

message BasicResponse {
  string message = 1;
  string error = 2;
}

message Player {
  string dispaly_name = 1;
  string email = 2;
}

message ConnectRequest {
  Player user = 1;
  string game_id = 2;
}

message ConnectResponse {
  BasicResponse value = 1;
  string AuthToken = 2;
}

message Play {
  string game_id = 1; // id of the game being played
  Player player = 2;  // unique id of an authenticated user for given game
  Action action = 3;  // the play being made by the user
  int32 ammount = 4;  // the ammount being bet, if any
}

message PlayResponse {
  TableStatus status = 1;
  repeated int32 player_cards = 2;
}

enum PlayingStatus {
  WAITING = 0;
  PLAYING = 1;
  LOST = 2;
}

message PublicPlayerStatus {
  int32 seat = 1;       // Table position of the player,
                        // negative number indicates lost
  int32 stack_size = 2; // chip count
}

message TableStatus {
  google.protobuf.Timestamp timestamp = 1;
  int32 dealer_position = 2; // Table position of the dealer for this hand
  int32 action_position = 3; // Table position whose turn it is to act
  repeated PublicPlayerStatus players = 4; // Current status of all players
  repeated int32 shared_cards = 5;         // The community cards on the table
}

message TournamentStatus {
  repeated TableStatus tables = 1;
  repeated PublicPlayerStatus leader_board = 2;
}

message TournamentStatusResponse { TournamentStatus status = 1; }

message TournamentStatusRequest {
  Player player = 1;
  string game_id = 2;
}

service PokerService {
  rpc Connect(ConnectRequest) returns (ConnectResponse);
  rpc MakePlay(Play) returns (TableStatus);
  rpc TournamentStatus(TournamentStatusRequest)
      returns (TournamentStatusResponse);
}